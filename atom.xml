<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-12-04T00:04:15.891Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ShaLi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++课堂小结(11.29)</title>
    <link href="http://example.com/2024/11/29/C++%E8%AF%BE%E5%A0%82%E5%B0%8F%E7%BB%9311.19/"/>
    <id>http://example.com/2024/11/29/C++%E8%AF%BE%E5%A0%82%E5%B0%8F%E7%BB%9311.19/</id>
    <published>2024-11-29T03:34:48.828Z</published>
    <updated>2024-12-04T00:04:15.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、关于分文件"><a href="#一、关于分文件" class="headerlink" title="一、关于分文件"></a>一、关于分文件</h1><ol><li>创建一个项目</li><li>使用多个cpp文件或.h文件等</li><li>只能有一个main函数</li></ol><h2 id="1-关于全局变量"><a href="#1-关于全局变量" class="headerlink" title="1.关于全局变量"></a>1.关于全局变量</h2><ol><li>在某个地方定义(在主函数之外 int a)</li><li>在某个地方调用(需要先声明 extern int a)</li><li>声明需要<strong>extern</strong>的原因是它不具备外部特性</li><li>函数自带外部特性,所以加不加extern都可</li></ol><h2 id="2-关于自定义头文件"><a href="#2-关于自定义头文件" class="headerlink" title="2.关于自定义头文件"></a>2.关于自定义头文件</h2><ol><li>后缀名(.h)</li><li>内部为正常定义形式</li><li>使用时为调用头文件形式(将&lt;&gt;换为””)</li></ol><h1 id="二、关于递归函数"><a href="#二、关于递归函数" class="headerlink" title="二、关于递归函数"></a>二、关于递归函数</h1><h2 id="1-基础特性"><a href="#1-基础特性" class="headerlink" title="1.基础特性"></a>1.基础特性</h2><ol><li>需要一个终止条件</li><li>以一定的规律不断重复调用该函数本身</li></ol><h2 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span></span>; <span class="comment">// 函数的声明</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n; <span class="comment">// 输入一个n,使用自定义函数来求第n位斐波那契数</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">fib</span>(n); <span class="comment">// 调用该递归函数并输出该数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义一个递归函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n=<span class="number">1</span> || n=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 因为斐波那契数第一位和第二位都是一,同时也可作为终止条件使用</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fib</span>(n<span class="number">-1</span>)+<span class="built_in">fib</span>(n<span class="number">-2</span>); <span class="comment">// 此处为循环调用函数本身</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注:在调用递归函数中的函数体时,后面的语句会被暂时搁置,在前面的函数执行完后才会继续执行<br>例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&gt;=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">f</span>(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n; <span class="comment">// 该语句会在上一个f(n/10)完全执行完后执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">12345</span>); <span class="comment">// 因为该函数定义在main函数之前,所以使用前无需声明</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为:<br>1<br>12<br>123<br>1234<br>12345</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、关于分文件&quot;&gt;&lt;a href=&quot;#一、关于分文件&quot; class=&quot;headerlink&quot; title=&quot;一、关于分文件&quot;&gt;&lt;/a&gt;一、关于分文件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;创建一个项目&lt;/li&gt;
&lt;li&gt;使用多个cpp文件或.h文件等&lt;/li&gt;
&lt;li&gt;只能有</summary>
      
    
    
    
    
  </entry>
  
</feed>
